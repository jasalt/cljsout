;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name breakout.core, :imports nil, :requires {set clojure.set, draw breakout.draw, breakout.update breakout.update, breakout.levels breakout.levels, weasel.repl weasel.repl, breakout.hud breakout.hud, r reagi.core, breakout.draw breakout.draw, clojure.set clojure.set, update breakout.update, breakout.utils breakout.utils, canvas monet.canvas, repl weasel.repl, reagi.core reagi.core, monet.canvas monet.canvas}, :uses {log breakout.utils, get-level breakout.levels, tell-hud breakout.hud, str-float breakout.utils}, :defs {make-brick-entity {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 49, :column 7, :end-line 49, :end-column 24, :arglists (quote ([canvas entity-key {pos-x :x, pos-y :y}]))}, :name breakout.core/make-brick-entity, :variadic false, :file "src/breakout/core.cljs", :end-column 24, :method-params ([canvas entity-key p__38903]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([canvas entity-key {pos-x :x, pos-y :y}]))}, canvas-dom {:name breakout.core/canvas-dom, :file "src/breakout/core.cljs", :line 29, :column 1, :end-line 29, :end-column 20, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 29, :column 10, :end-line 29, :end-column 20}}, get-bricks {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 84, :column 7, :end-line 84, :end-column 17, :arglists (quote ([]))}, :name breakout.core/get-bricks, :variadic false, :file "src/breakout/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 99, :column 7, :end-line 99, :end-column 13, :arglists (quote ([]))}, :name breakout.core/start!, :variadic false, :file "src/breakout/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ball-entity {:name breakout.core/ball-entity, :file "src/breakout/core.cljs", :line 64, :column 1, :end-line 64, :end-column 17, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 64, :column 6, :end-line 64, :end-column 17}}, ball {:name breakout.core/ball, :file "src/breakout/core.cljs", :line 58, :column 1, :end-line 58, :end-column 10, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 58, :column 6, :end-line 58, :end-column 10}}, init! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 92, :column 7, :end-line 92, :end-column 12, :arglists (quote ([]))}, :name breakout.core/init!, :variadic false, :file "src/breakout/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, game-canvas {:name breakout.core/game-canvas, :file "src/breakout/core.cljs", :line 30, :column 1, :end-line 30, :end-column 21, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 30, :column 10, :end-line 30, :end-column 21}}, pad-entity {:name breakout.core/pad-entity, :file "src/breakout/core.cljs", :line 63, :column 1, :end-line 63, :end-column 16, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 63, :column 6, :end-line 63, :end-column 16}}, make-ball-entity {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 40, :column 7, :end-line 40, :end-column 23, :arglists (quote ([monet-canvas ball pad]))}, :name breakout.core/make-ball-entity, :variadic false, :file "src/breakout/core.cljs", :end-column 23, :method-params ([monet-canvas ball pad]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([monet-canvas ball pad]))}, make-pad-entity {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([pad]))}, :name breakout.core/make-pad-entity, :variadic false, :file "src/breakout/core.cljs", :end-column 22, :method-params ([pad]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pad]))}, dimensions {:name breakout.core/dimensions, :file "src/breakout/core.cljs", :line 26, :column 1, :end-line 26, :end-column 20, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 26, :column 10, :end-line 26, :end-column 20}}, pause! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 102, :column 7, :end-line 102, :end-column 13, :arglists (quote ([]))}, :name breakout.core/pause!, :variadic false, :file "src/breakout/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pad {:name breakout.core/pad, :file "src/breakout/core.cljs", :line 53, :column 1, :end-line 53, :end-column 9, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 53, :column 6, :end-line 53, :end-column 9}}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 109, :column 7, :end-line 109, :end-column 19, :arglists (quote ([]))}, :name breakout.core/on-js-reload, :variadic false, :file "src/breakout/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-brick! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 68, :column 7, :end-line 68, :end-column 17, :arglists (quote ([canvas x y]))}, :name breakout.core/add-brick!, :variadic false, :file "src/breakout/core.cljs", :end-column 17, :method-params ([canvas x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([canvas x y]))}, build-level {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/core.cljs", :line 77, :column 7, :end-line 77, :end-column 18, :arglists (quote ([level-number]))}, :name breakout.core/build-level, :variadic false, :file "src/breakout/core.cljs", :end-column 18, :method-params ([level-number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level-number]))}}, :require-macros {r reagi.core, reagi.core reagi.core}, :cljs.analyzer/constants {:seen #{:y :ball-entity :ball :breakout.core/brick :pad-entity :brick :w :value :width :entities :updating? :angle :print :canvas :size :pad :h :console :x :a :height}, :order [:print :console :pad :ball :width :height :size :x :y :a :angle :w :h :canvas :brick :breakout.core/brick :entities :value :ball-entity :pad-entity :updating?]}, :doc nil}