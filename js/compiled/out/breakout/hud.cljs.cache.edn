;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name breakout.hud, :imports nil, :requires {r reagi.core, reagi.core reagi.core, dom reagent.core, reagent.core reagent.core, input breakout.input, breakout.input breakout.input, breakout.utils breakout.utils, cljs.core.async cljs.core.async}, :uses {timeout breakout.utils, close! cljs.core.async, chan cljs.core.async, config breakout.input, rand-char breakout.utils, set-input breakout.input}, :defs {hud-state {:name breakout.hud/hud-state, :file "src/breakout/hud.cljs", :line 13, :column 1, :end-line 13, :end-column 19, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 13, :column 10, :end-line 13, :end-column 19}}, hud-update-stream {:name breakout.hud/hud-update-stream, :file "src/breakout/hud.cljs", :line 18, :column 1, :end-line 18, :end-column 27, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 18, :column 10, :end-line 18, :end-column 27}}, debug-view {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 30, :column 7, :end-line 30, :end-column 17, :arglists (quote ([]))}, :name breakout.hud/debug-view, :variadic false, :file "src/breakout/hud.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, tell-hud {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 54, :column 7, :end-line 54, :end-column 15, :arglists (quote ([msg]))}, :name breakout.hud/tell-hud, :variadic false, :file "src/breakout/hud.cljs", :end-column 15, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, overlay-text {:name breakout.hud/overlay-text, :file "src/breakout/hud.cljs", :line 62, :column 1, :end-line 62, :end-column 22, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 62, :column 10, :end-line 62, :end-column 22}}, game-overlay {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([]))}, :name breakout.hud/game-overlay, :variadic false, :file "src/breakout/hud.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-text {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([text]))}, :name breakout.hud/set-text, :variadic false, :file "src/breakout/hud.cljs", :end-column 15, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, startup-title-animation {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/hud.cljs", :line 75, :column 7, :end-line 75, :end-column 30, :arglists (quote ([]))}, :name breakout.hud/startup-title-animation, :variadic false, :file "src/breakout/hud.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, r reagi.core, reagi.core reagi.core}, :cljs.analyzer/constants {:seen #{:y :ball :bricks :else :orientation :mouse :last-brick :recur :type :div :pad :unscaled :active :checked :accelerometer :h2 :x :input :h1 :on-change :h3 :scaled :p :a}, :order [:accelerometer :mouse :orientation :div :h2 :h3 :p :active :input :type :checked :on-change :scaled :unscaled :pad :ball :x :y :a :bricks :last-brick :h1 :recur :else]}, :doc nil}