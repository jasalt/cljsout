;; Analyzed by ClojureScript 1.7.145
{:use-macros {test-var cemerick.cljs.test, testing cemerick.cljs.test, with-test cemerick.cljs.test, is cemerick.cljs.test, deftest cemerick.cljs.test, run-tests cemerick.cljs.test}, :excludes #{}, :name breakout.tests, :imports nil, :requires {t cemerick.cljs.test, cemerick.cljs.test cemerick.cljs.test, core breakout.core, breakout.core breakout.core, levels breakout.levels, breakout.levels breakout.levels, utils breakout.utils, breakout.utils breakout.utils}, :uses nil, :defs {levels-get-level {:name breakout.tests/levels-get-level, :file "src/breakout/tests.cljs", :line 12, :column 1, :end-line 12, :end-column 26, :declared true, :meta {:file "/Users/js/dev/cljsout/src/breakout/tests.cljs", :line 12, :column 10, :end-line 12, :end-column 26, :declared true}}, scale-value {:name breakout.tests/scale-value, :file "src/breakout/tests.cljs", :line 43, :column 1, :end-line 43, :end-column 21, :declared true, :meta {:file "/Users/js/dev/cljsout/src/breakout/tests.cljs", :line 43, :column 10, :end-line 43, :end-column 21, :declared true}}}, :require-macros {cemerick.cljs.test cemerick.cljs.test, t cemerick.cljs.test}, :cljs.analyzer/constants {:seen #{:async = breakout.tests/scale-value :else :name breakout.tests/levels-get-level :file get :end-column levels/levels :type :column :fail breakout.tests :line not utils/scale-value :expected :end-line :test-name levels/parse-level-str :error :pass :actual :test :message}, :order [:file :line :column :end-line :end-column :name :test breakout.tests/levels-get-level :async :test-name :else :type :expected :actual :message :error = levels/parse-level-str get levels/levels :pass :fail not breakout.tests breakout.tests/scale-value utils/scale-value]}, :doc nil}