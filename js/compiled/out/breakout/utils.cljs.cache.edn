;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name breakout.utils, :imports nil, :requires {cljs.pprint cljs.pprint, gstring goog.string, goog.string goog.string, goog.string.format goog.string.format, cljs.core.async cljs.core.async}, :uses {pprint cljs.pprint, close! cljs.core.async, chan cljs.core.async}, :defs {game-canvas {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 13, :column 6, :end-line 13, :end-column 17}, :name breakout.utils/game-canvas, :variadic false, :file "src/breakout/utils.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists nil}, log {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 15, :column 7, :end-line 15, :end-column 10, :arglists (quote ([msg]))}, :name breakout.utils/log, :variadic false, :file "src/breakout/utils.cljs", :end-column 10, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, str-float {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([x n] [x])), :doc "Convert float to str rounded to n decimals (default 1).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x n] [x]), :arglists ([x n] [x]), :arglists-meta (nil nil)}}, :name breakout.utils/str-float, :variadic false, :file "src/breakout/utils.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x n] [x]), :arglists ([x n] [x]), :arglists-meta (nil nil)}, :method-params ([x n] [x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists ([x n] [x]), :doc "Convert float to str rounded to n decimals (default 1)."}, get-window-size {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 26, :column 7, :end-line 26, :end-column 22, :arglists (quote ([]))}, :name breakout.utils/get-window-size, :variadic false, :file "src/breakout/utils.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-canvas-size {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 29, :column 7, :end-line 29, :end-column 22, :arglists (quote ([]))}, :name breakout.utils/get-canvas-size, :variadic false, :file "src/breakout/utils.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, scale-value {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([x [x-min x-max] [to-min to-max]]))}, :name breakout.utils/scale-value, :variadic false, :file "src/breakout/utils.cljs", :end-column 18, :method-params ([x p__28160 p__28161]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x [x-min x-max] [to-min to-max]]))}, timeout {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([ms]))}, :name breakout.utils/timeout, :variadic false, :file "src/breakout/utils.cljs", :end-column 14, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms]))}, rand-char {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/src/breakout/utils.cljs", :line 45, :column 7, :end-line 45, :end-column 16, :arglists (quote ([]))}, :name breakout.utils/rand-char, :variadic false, :file "src/breakout/utils.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:canvas}, :order [:canvas]}, :doc nil}