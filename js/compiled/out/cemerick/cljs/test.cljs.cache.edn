;; Analyzed by ClojureScript 1.7.145
{:use-macros {with-test-out cemerick.cljs.test, test-runner-entry-point cemerick.cljs.test}, :excludes #{set-print-fn!}, :name cemerick.cljs.test, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {default-fixture {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 234, :column 8, :end-line 234, :end-column 23, :private true, :arglists (quote ([f])), :doc "The default, empty, fixture function.  Just calls its argument.", :added "1.1"}, :private true, :added "1.1", :name cemerick.cljs.test/default-fixture, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "The default, empty, fixture function.  Just calls its argument."}, *test-print-fn* {:name cemerick.cljs.test/*test-print-fn*, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 7, :column 1, :end-line 7, :end-column 31, :dynamic true, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 7, :column 16, :end-line 7, :end-column 31, :dynamic true}}, test-all-vars {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 389, :column 7, :end-line 389, :end-column 20, :arglists (quote ([ns-sym] [test-env ns-sym])), :doc "Calls test-var on every var interned in the namespace, with fixtures.", :added "1.1", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns-sym] [test-env ns-sym]), :arglists ([ns-sym] [test-env ns-sym]), :arglists-meta (nil nil)}}, :added "1.1", :name cemerick.cljs.test/test-all-vars, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns-sym] [test-env ns-sym]), :arglists ([ns-sym] [test-env ns-sym]), :arglists-meta (nil nil)}, :method-params ([ns-sym] [test-env ns-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists ([ns-sym] [test-env ns-sym]), :doc "Calls test-var on every var interned in the namespace, with fixtures."}, test-summary {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 443, :column 8, :end-line 443, :end-column 20, :private true, :arglists (quote ([test-env]))}, :private true, :name cemerick.cljs.test/test-summary, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 20, :method-params ([test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env]))}, start-next-async-test {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 267, :column 8, :end-line 267, :end-column 29, :private true, :arglists (quote ([async-test-env]))}, :private true, :name cemerick.cljs.test/start-next-async-test, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :method-params ([async-test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([async-test-env]))}, on-testing-complete {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 96, :column 16, :end-line 96, :end-column 35, :export true, :arglists (quote ([test-env callback])), :doc "Same as `on-async-progress`, but will only call [callback] when all tests are complete."}, :name cemerick.cljs.test/on-testing-complete, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 35, :method-params ([test-env callback]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([test-env callback])), :doc "Same as `on-async-progress`, but will only call [callback] when all tests are complete."}, registered-fixtures {:name cemerick.cljs.test/registered-fixtures, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 46, :column 1, :end-line 46, :end-column 25, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 46, :column 6, :end-line 46, :end-column 25}}, do-report {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 146, :column 7, :end-line 146, :end-column 16, :arglists (quote ([{:keys [test-env test-name], :as test-ctx} m] [m])), :doc "Add file and line information to a test result and call report.\n   If you are writing a custom assert-expr method, call this function\n   to pass test results to report.", :added "1.2", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [test-env test-name], :as test-ctx} m] [m]), :arglists ([{:keys [test-env test-name], :as test-ctx} m] [m]), :arglists-meta (nil nil)}}, :added "1.2", :name cemerick.cljs.test/do-report, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [test-env test-name], :as test-ctx} m] [m]), :arglists ([{:keys [test-env test-name], :as test-ctx} m] [m]), :arglists-meta (nil nil)}, :method-params ([{:keys [test-env test-name], :as test-ctx} m] [m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [test-env test-name], :as test-ctx} m] [m]), :doc "Add file and line information to a test result and call report.\n   If you are writing a custom assert-expr method, call this function\n   to pass test results to report."}, run-all-tests {:protocol-inline nil, :meta {:added "1.1", :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [re]), :arglists ([] [re]), :arglists-meta (nil nil)}, :export true, :column 16, :line 463, :end-line 463, :arglists (quote ([] [re])), :doc "Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."}, :added "1.1", :name cemerick.cljs.test/run-all-tests, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [re]), :arglists ([] [re]), :arglists-meta (nil nil)}, :method-params ([] [re]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists ([] [re]), :doc "Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."}, map->TestContext {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 56, :column 12, :end-line 56, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__31247]))}, :name cemerick.cljs.test/map->TestContext, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :method-params ([G__31247]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__31247]))}, async-test? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 256, :column 8, :end-line 256, :end-column 19, :private true, :arglists (quote ([test-fn]))}, :private true, :name cemerick.cljs.test/async-test?, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 19, :method-params ([test-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-fn]))}, testing-contexts-str {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 114, :column 7, :end-line 114, :end-column 27, :arglists (quote ([test-env])), :doc "Returns a string representation of the current test context as represented in\n  the [test-env]'s ::test-contexts list. Joins strings in that list with\n  spaces.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/testing-contexts-str, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 27, :method-params ([test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env])), :doc "Returns a string representation of the current test context as represented in\n  the [test-env]'s ::test-contexts list. Joins strings in that list with\n  spaces."}, join-fixtures {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 247, :column 7, :end-line 247, :end-column 20, :arglists (quote ([fixtures])), :doc "Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/join-fixtures, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 20, :method-params ([fixtures]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fixtures])), :doc "Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty."}, squelch-internals {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 291, :column 8, :end-line 291, :end-column 25, :private true, :arglists (quote ([test-env])), :doc "Removes framework-internal bits from a test environment for more pleasant human viewing."}, :private true, :name cemerick.cljs.test/squelch-internals, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 25, :method-params ([test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env])), :doc "Removes framework-internal bits from a test environment for more pleasant human viewing."}, file-and-line {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 142, :column 8, :end-line 142, :end-column 21, :private true, :arglists (quote ([error]))}, :private true, :name cemerick.cljs.test/file-and-line, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 21, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, async-test-summary {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 436, :column 8, :end-line 436, :end-column 26, :private true, :arglists (quote ([test-env]))}, :private true, :name cemerick.cljs.test/async-test-summary, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 26, :method-params ([test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env]))}, report {:meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 139, :column 3, :end-line 139, :end-column 9, :doc "Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.  See the documentation at\n   the top of test_is.clj for more information on the types of\n   arguments for 'report'.", :dynamic true, :added "1.1"}, :added "1.1", :name cemerick.cljs.test/report, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 9, :column 1, :dynamic true, :line 130, :end-line 139, :doc "Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.  See the documentation at\n   the top of test_is.clj for more information on the types of\n   arguments for 'report'."}, finish-test-entry-point {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 302, :column 8, :end-line 302, :end-column 31, :private true, :arglists (quote ([entry-point? test-env]))}, :private true, :name cemerick.cljs.test/finish-test-entry-point, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 31, :method-params ([entry-point? test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entry-point? test-env]))}, schedule-async-test {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 311, :column 8, :end-line 311, :end-column 27, :private true, :arglists (quote ([async-test-env test-name test-fn]))}, :private true, :name cemerick.cljs.test/schedule-async-test, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 27, :method-params ([async-test-env test-name test-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 3, :fn-var true, :arglists (quote ([async-test-env test-name test-fn]))}, compose-fixtures {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 240, :column 7, :end-line 240, :end-column 23, :arglists (quote ([f1 f2])), :doc "Composes two fixture functions, creating a new fixture function\n  that combines their behavior.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/compose-fixtures, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :method-params ([f1 f2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f1 f2])), :doc "Composes two fixture functions, creating a new fixture function\n  that combines their behavior."}, test-async-fn {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 260, :column 8, :end-line 260, :end-column 21, :private true, :arglists (quote ([async-test-env test-name test-fn]))}, :private true, :name cemerick.cljs.test/test-async-fn, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 21, :method-params ([async-test-env test-name test-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 3, :fn-var true, :arglists (quote ([async-test-env test-name test-fn]))}, ->TestContext {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 56, :column 12, :end-line 56, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([test-env test-name]))}, :name cemerick.cljs.test/->TestContext, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :method-params ([test-env test-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([test-env test-name]))}, done* {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 319, :column 7, :end-line 319, :end-column 12, :arglists (quote ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}]), :arglists ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}]), :arglists-meta (nil nil)}}, :name cemerick.cljs.test/done*, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}]), :arglists ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}]), :arglists-meta (nil nil)}, :method-params ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [test-env test-name], :as test-ctx} error] [{async-test-env :test-env, :keys [test-name], :as test-ctx}])}, testing-complete? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 64, :column 7, :end-line 64, :end-column 24, :arglists (quote ([test-env]))}, :name cemerick.cljs.test/testing-complete?, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 24, :method-params ([test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env]))}, *test-ctx* {:name cemerick.cljs.test/*test-ctx*, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 15, :column 1, :end-line 15, :end-column 26, :dynamic true, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 15, :column 16, :end-line 15, :end-column 26, :dynamic true}}, set-print-fn! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 484, :column 16, :end-line 484, :end-column 29, :export true, :arglists (quote ([f]))}, :name cemerick.cljs.test/set-print-fn!, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :method-params ([f]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, test-function {:protocol-inline nil, :meta {:added "1.1", :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [test-env v]), :arglists ([v] [test-env v]), :arglists-meta (nil nil)}, :column 7, :dynamic true, :line 356, :end-line 356, :arglists (quote ([v] [test-env v])), :doc "If v has a function in its :test metadata, calls that function,\n  conjing its name into the test environment's ::test-functions list.\n\n  Note that this is the implementation of `test-var` in clojure.test,\n  which is a macro in clojurescript.test.  See `cemerick.cljs.test/test-var`\n  in the Clojure file for `test-var`."}, :added "1.1", :name cemerick.cljs.test/test-function, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [test-env v]), :arglists ([v] [test-env v]), :arglists-meta (nil nil)}, :method-params ([v] [test-env v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists ([v] [test-env v]), :doc "If v has a function in its :test metadata, calls that function,\n  conjing its name into the test environment's ::test-functions list.\n\n  Note that this is the implementation of `test-var` in clojure.test,\n  which is a macro in clojurescript.test.  See `cemerick.cljs.test/test-var`\n  in the Clojure file for `test-var`."}, init-test-environment* {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 20, :column 8, :end-line 20, :end-column 30, :private true, :arglists (quote ([aux-data]))}, :private true, :name cemerick.cljs.test/init-test-environment*, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 30, :method-params ([aux-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([aux-data]))}, register-test-ns-hook! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 52, :column 7, :end-line 52, :end-column 29, :arglists (quote ([ns name]))}, :name cemerick.cljs.test/register-test-ns-hook!, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :method-params ([ns name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ns name]))}, registered-tests {:name cemerick.cljs.test/registered-tests, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 42, :column 1, :end-line 42, :end-column 22, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 42, :column 6, :end-line 42, :end-column 22}}, print-summary {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 432, :column 8, :end-line 432, :end-column 21, :private true, :arglists (quote ([env]))}, :private true, :name cemerick.cljs.test/print-summary, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 21, :method-params ([env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 432, :end-line 432, :max-fixed-arity 1, :fn-var true, :arglists (quote ([env]))}, successful? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 472, :column 16, :end-line 472, :end-column 27, :export true, :arglists (quote ([test-env])), :doc "Returns true if the given test summary indicates all tests\n  were successful, false otherwise.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/successful?, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 27, :method-params ([test-env]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([test-env])), :doc "Returns true if the given test summary indicates all tests\n  were successful, false otherwise."}, inc-report-counter {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 122, :column 7, :end-line 122, :end-column 25, :arglists (quote ([test-env name])), :doc "Increments the named counter in the [test-env] atom.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/inc-report-counter, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 25, :method-params ([test-env name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([test-env name])), :doc "Increments the named counter in the [test-env] atom."}, testing-vars-str {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 103, :column 7, :end-line 103, :end-column 23, :arglists (quote ([{:keys [file line test-env test-name], :as m}])), :doc "Returns a string representation of the current test.  Renders names\n  in the test environment's ::test-functions list, then the source file and line of\n  current assertion.", :added "1.1"}, :added "1.1", :name cemerick.cljs.test/testing-vars-str, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :method-params ([p__31262]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [file line test-env test-name], :as m}])), :doc "Returns a string representation of the current test.  Renders names\n  in the test environment's ::test-functions list, then the source file and line of\n  current assertion."}, on-async-progress {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 75, :column 16, :end-line 75, :end-column 33, :export true, :arglists (quote ([test-env callback])), :doc "Registers a watcher on the :async testing (sub)environment provided by\n[test-env]; when its key metrics (:test, :pass, :fail, :error) change,\n[callback] will be called with [test-env].  The watcher will be removed when all\ntests are complete.\n\nIf [test-env] is already complete, [callback] will be called with it as an\nargument immediately, and no watcher will be registered."}, :name cemerick.cljs.test/on-async-progress, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 33, :method-params ([test-env callback]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([test-env callback])), :doc "Registers a watcher on the :async testing (sub)environment provided by\n[test-env]; when its key metrics (:test, :pass, :fail, :error) change,\n[callback] will be called with [test-env].  The watcher will be removed when all\ntests are complete.\n\nIf [test-env] is already complete, [callback] will be called with it as an\nargument immediately, and no watcher will be registered."}, test-ns {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 408, :column 7, :end-line 408, :end-column 14, :arglists (quote ([ns-sym] [test-env ns-sym])), :doc "If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to an atom initialized to\n  *inital-report-counters*.  Returns the final, dereferenced state of\n  *report-counters*.", :added "1.1", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns-sym] [test-env ns-sym]), :arglists ([ns-sym] [test-env ns-sym]), :arglists-meta (nil nil)}}, :added "1.1", :name cemerick.cljs.test/test-ns, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ns-sym] [test-env ns-sym]), :arglists ([ns-sym] [test-env ns-sym]), :arglists-meta (nil nil)}, :method-params ([ns-sym] [test-env ns-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 2, :fn-var true, :arglists ([ns-sym] [test-env ns-sym]), :doc "If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to an atom initialized to\n  *inital-report-counters*.  Returns the final, dereferenced state of\n  *report-counters*."}, run-tests* {:protocol-inline nil, :meta {:added "1.1", :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(namespaces)], :arglists ([& namespaces]), :arglists-meta (nil)}, :export true, :column 16, :line 449, :end-line 449, :arglists (quote ([& namespaces])), :doc "Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given.  Returns a map\n  summarizing test results."}, :added "1.1", :name cemerick.cljs.test/run-tests*, :variadic true, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(namespaces)], :arglists ([& namespaces]), :arglists-meta (nil)}, :method-params [(namespaces)], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 449, :end-line 449, :max-fixed-arity 0, :fn-var true, :arglists ([& namespaces]), :doc "Runs all tests in the given namespaces; prints results.\n  Defaults to current namespace if none given.  Returns a map\n  summarizing test results."}, stop {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 347, :column 7, :end-line 347, :end-column 11, :arglists (quote ([async-test-env]))}, :name cemerick.cljs.test/stop, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 11, :method-params ([async-test-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([async-test-env]))}, TestContext {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cemerick.cljs.test/TestContext, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 56, :record true, :end-line 56, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, register-fixtures! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 227, :column 7, :end-line 227, :end-column 25, :arglists (quote ([ns-sym fixture-type & fixture-fns])), :doc "Wrap test runs in a fixture function to perform setup and\n  teardown. Using a fixture-type of :each wraps every test\n  individually, while :once wraps the whole run in a single function.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ns-sym fixture-type fixture-fns)], :arglists ([ns-sym fixture-type & fixture-fns]), :arglists-meta (nil)}}, :name cemerick.cljs.test/register-fixtures!, :variadic true, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ns-sym fixture-type fixture-fns)], :arglists ([ns-sym fixture-type & fixture-fns]), :arglists-meta (nil)}, :method-params [(ns-sym fixture-type fixture-fns)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists ([ns-sym fixture-type & fixture-fns]), :doc "Wrap test runs in a fixture function to perform setup and\n  teardown. Using a fixture-type of :each wraps every test\n  individually, while :once wraps the whole run in a single function."}, register-test! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 48, :column 7, :end-line 48, :end-column 21, :arglists (quote ([ns name fn]))}, :name cemerick.cljs.test/register-test!, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 21, :method-params ([ns name fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ns name fn]))}, maybe-deref {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 60, :column 8, :end-line 60, :end-column 19, :private true, :arglists (quote ([x]))}, :private true, :name cemerick.cljs.test/maybe-deref, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, *entry-point* {:name cemerick.cljs.test/*entry-point*, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 11, :column 1, :end-line 11, :end-column 39, :private true, :dynamic true, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 11, :column 26, :end-line 11, :end-column 39, :private true, :dynamic true}}, init-test-environment {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 29, :column 8, :end-line 29, :end-column 29, :private true, :arglists (quote ([]))}, :private true, :name cemerick.cljs.test/init-test-environment, :variadic false, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, registered-test-hooks {:name cemerick.cljs.test/registered-test-hooks, :file "resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 44, :column 1, :end-line 44, :end-column 27, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/cemerick/cljs/test.cljs", :line 44, :column 6, :end-line 44, :end-column 27}}}, :require-macros {cemerick.cljs.test cemerick.cljs.test}, :cljs.analyzer/constants {:seen #{:test-env :async :each :cemerick.cljs.test/test-print-fn fn? :namespaces :begin-test-var :else test-env :default :ns :name :cemerick.cljs.test/running :file v :cemerick.cljs.test/foo :type test-ctx :cemerick.cljs.test/remaining :summary :end-test-var :stop :fail :line instance? :var :once :expected :multiple-async-done :cemerick.cljs.test/test-functions :test-name :begin-test-ns :error :cemerick.cljs.test/test-contexts :pass :hierarchy :actual TestContext :end-test-ns :test :message test-name}, :order [:test :pass :fail :error :cemerick.cljs.test/test-print-fn :cemerick.cljs.test/test-contexts :cemerick.cljs.test/test-functions :async :test-env :test-name test-env test-name :cemerick.cljs.test/remaining :cemerick.cljs.test/running :file :line :hierarchy :type :default instance? TestContext test-ctx :actual :message :expected :multiple-async-done :summary :begin-test-ns :ns :end-test-ns :begin-test-var :end-test-var :var :stop :namespaces :cemerick.cljs.test/foo :name fn? v :else :once :each]}, :doc nil}