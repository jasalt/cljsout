;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, behavior reagi.core}, :excludes #{reduce map mapcat deliver remove cycle time merge flatten filter count constantly}, :name reagi.core, :imports nil, :requires {core cljs.core, cljs.core cljs.core, a cljs.core.async, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, >! cljs.core.async}, :defs {unbox {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 27, :column 4, :end-line 27, :end-column 9, :protocol reagi.core/Boxed, :doc "Unbox a boxed value.", :arglists (quote ([x]))}, :protocol reagi.core/Boxed, :name reagi.core/unbox, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 9, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Unbox a boxed value."}, complete? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 18, :column 4, :end-line 18, :end-column 13, :protocol reagi.core/Signal, :doc "True if the signal's value will no longer change.", :arglists (quote ([signal]))}, :protocol reagi.core/Signal, :name reagi.core/complete?, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "True if the signal's value will no longer change."}, reduce {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 382, :column 7, :end-line 382, :end-column 13, :arglists (quote ([f stream] [f init stream])), :doc "Create a new stream by applying a function to the previous return value and\n  the current value of the source stream.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f stream] [f init stream]), :arglists ([f stream] [f init stream]), :arglists-meta (nil nil)}}, :name reagi.core/reduce, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f stream] [f init stream]), :arglists ([f stream] [f init stream]), :arglists-meta (nil nil)}, :method-params ([f stream] [f init stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 3, :fn-var true, :arglists ([f stream] [f init stream]), :doc "Create a new stream by applying a function to the previous return value and\n  the current value of the source stream."}, deref-events {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 177, :column 8, :end-line 177, :end-column 20, :private true, :arglists (quote ([head]))}, :private true, :name reagi.core/deref-events, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 20, :method-params ([head]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([head]))}, close-all! {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 288, :column 8, :end-line 288, :end-column 18, :private true, :arglists (quote ([chs]))}, :private true, :name reagi.core/close-all!, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 18, :method-params ([chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chs]))}, time-ms {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 445, :column 8, :end-line 445, :end-column 15, :private true, :arglists (quote ([]))}, :private true, :name reagi.core/time-ms, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, subscribe {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 277, :column 7, :end-line 277, :end-column 16, :arglists (quote ([stream channel])), :doc "Deliver events on an event stream to a core.async channel. Returns the\n  channel.\n\n  The events from the stream cannot include nil. The channel will be closed when\n  the event stream is complete."}, :name reagi.core/subscribe, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 16, :method-params ([stream channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stream channel])), :doc "Deliver events on an event stream to a core.async channel. Returns the\n  channel.\n\n  The events from the stream cannot include nil. The channel will be closed when\n  the event stream is complete."}, Disposable {:no-doc true, :meta {:no-doc true, :protocol-symbol true, :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :end-column 33, :column 23, :line 182, :protocol-info {:methods {dispose [[x]], on-dispose [[x f]]}}, :end-line 182, :doc nil, :jsdoc ("@interface")}, :protocol-symbol true, :name reagi.core/Disposable, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 33, :column 1, :line 182, :protocol-info {:methods {dispose [[x]], on-dispose [[x f]]}}, :info nil, :end-line 182, :impls #{reagi.core/Events}, :doc nil, :jsdoc ("@interface")}, map {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 352, :column 7, :end-line 352, :end-column 10, :arglists (quote ([f & streams])), :doc "Map a function over a stream.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f streams)], :arglists ([f & streams]), :arglists-meta (nil)}}, :name reagi.core/map, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f streams)], :arglists ([f & streams]), :arglists-meta (nil)}, :method-params [(f streams)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 1, :fn-var true, :arglists ([f & streams]), :doc "Map a function over a stream."}, ->Events {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 190, :column 10, :end-line 190, :end-column 16, :protocols #{cljs.core/IFn cljs.core/IPending reagi.core/Signal cljs.core/IDeref reagi.core/Disposable reagi.core/Observable}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IPending cljs.core/IDeref}, :factory :positional, :arglists (quote ([ch mult head closed disposers]))}, :protocols #{cljs.core/IFn cljs.core/IPending reagi.core/Signal cljs.core/IDeref reagi.core/Disposable reagi.core/Observable}, :name reagi.core/->Events, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 16, :method-params ([ch mult head closed disposers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 190, :end-line 190, :max-fixed-arity 5, :fn-var true, :arglists (quote ([ch mult head closed disposers])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IPending cljs.core/IDeref}}, mapcat {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 341, :column 7, :end-line 341, :end-column 13, :arglists (quote ([f stream] [f stream & streams])), :doc "Mapcat a function over a stream.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([f stream]), :arglists ([f stream] [f stream & streams]), :arglists-meta (nil nil)}}, :name reagi.core/mapcat, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([f stream]), :arglists ([f stream] [f stream & streams]), :arglists-meta (nil nil)}, :method-params ([f stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 2, :fn-var true, :arglists ([f stream] [f stream & streams]), :doc "Mapcat a function over a stream."}, Boxed {:no-doc true, :meta {:no-doc true, :protocol-symbol true, :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :end-column 28, :column 23, :line 26, :protocol-info {:methods {unbox [[x]]}}, :end-line 26, :doc nil, :jsdoc ("@interface")}, :protocol-symbol true, :name reagi.core/Boxed, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 28, :column 1, :line 26, :protocol-info {:methods {unbox [[x]]}}, :info nil, :end-line 26, :impls #{default reagi.core/Completed reagi.core/t_reagi$core29093 reagi.core/t_reagi$core29090}, :doc nil, :jsdoc ("@interface")}, join {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 505, :column 7, :end-line 505, :end-column 11, :arglists (quote ([& streams])), :doc "Join several streams together. Events are delivered from the first stream\n  until it is completed, then the next stream, until all streams are complete.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}}, :name reagi.core/join, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}, :method-params [(streams)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 505, :end-line 505, :max-fixed-arity 0, :fn-var true, :arglists ([& streams]), :doc "Join several streams together. Events are delivered from the first stream\n  until it is completed, then the next stream, until all streams are complete."}, ->t_reagi$core29093 {:protocol-inline nil, :meta {:anonymous true, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box x meta29094])), :file nil}, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :name reagi.core/->t_reagi$core29093, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :method-params ([box x meta29094]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box x meta29094])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 408, :column 7, :end-line 408, :end-column 13, :arglists (quote ([stream] [n stream])), :doc "Buffer all the events in the stream. A maximum buffer size may be specified,\n  in which case the buffer will contain only the last n items. It's recommended\n  that a buffer size is specified, otherwise the buffer will grow without limit.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([stream] [n stream]), :arglists ([stream] [n stream]), :arglists-meta (nil nil)}}, :name reagi.core/buffer, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([stream] [n stream]), :arglists ([stream] [n stream]), :arglists-meta (nil nil)}, :method-params ([stream] [n stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 2, :fn-var true, :arglists ([stream] [n stream]), :doc "Buffer all the events in the stream. A maximum buffer size may be specified,\n  in which case the buffer will contain only the last n items. It's recommended\n  that a buffer size is specified, otherwise the buffer will grow without limit."}, run-sampler {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 468, :column 8, :end-line 468, :end-column 19, :private true, :arglists (quote ([ref interval stop out]))}, :private true, :name reagi.core/run-sampler, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 19, :method-params ([ref interval stop out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ref interval stop out]))}, deliver {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 267, :column 7, :end-line 267, :end-column 14, :arglists (quote ([stream & msgs])), :doc "Deliver one or more messages to an event stream.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([stream] [stream msg]), :arglists ([stream] [stream msg] [stream msg & msgs]), :arglists-meta (nil nil nil)}}, :name reagi.core/deliver, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([stream] [stream msg]), :arglists ([stream] [stream msg] [stream msg & msgs]), :arglists-meta (nil nil nil)}, :method-params ([stream] [stream msg]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists ([stream] [stream msg] [stream msg & msgs]), :doc "Deliver one or more messages to an event stream."}, remove {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 362, :column 7, :end-line 362, :end-column 13, :arglists (quote ([pred stream])), :doc "Remove all items in a stream the predicate matches."}, :name reagi.core/remove, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([pred stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred stream])), :doc "Remove all items in a stream the predicate matches."}, ->t_reagi$core29332 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult* ch state meta29333])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name reagi.core/->t_reagi$core29332, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :method-params ([mult* ch state meta29333]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 113, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult* ch state meta29333])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 333, :column 8, :end-line 333, :end-column 17, :private true, :arglists (quote ([f in out]))}, :private true, :name reagi.core/mapcat-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 17, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out]))}, Completed {:num-fields 1, :protocols #{reagi.core/Boxed}, :name reagi.core/Completed, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 19, :type true, :column 10, :line 29, :record false, :end-line 29, :skip-protocol-flag nil}, cycle {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 438, :column 7, :end-line 438, :end-column 12, :arglists (quote ([values stream])), :doc "Incoming events cycle a sequence of values. Useful for switching between\n  states."}, :name reagi.core/cycle, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 12, :method-params ([values stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 2, :fn-var true, :arglists (quote ([values stream])), :doc "Incoming events cycle a sequence of values. Useful for switching between\n  states."}, ->Completed {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 29, :column 10, :end-line 29, :end-column 19, :protocols #{reagi.core/Boxed}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([x]))}, :protocols #{reagi.core/Boxed}, :name reagi.core/->Completed, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :skip-protocol-flag nil}, signal? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([x])), :doc "True if the object is a behavior or event stream."}, :name reagi.core/signal?, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if the object is a behavior or event stream."}, Events {:num-fields 5, :protocols #{cljs.core/IFn cljs.core/IPending reagi.core/Signal cljs.core/IDeref reagi.core/Disposable reagi.core/Observable}, :name reagi.core/Events, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 16, :type true, :column 10, :line 190, :record false, :end-line 190, :skip-protocol-flag #{cljs.core/IFn cljs.core/IPending cljs.core/IDeref}}, mult* {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 108, :column 8, :end-line 108, :end-column 13, :private true, :arglists (quote ([ch])), :doc "A version of clojure.core.async/mult that fixes ASYNC-64.\n  This can be removed once a fix is released for core.async."}, :private true, :name reagi.core/mult*, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "A version of clojure.core.async/mult that fixes ASYNC-64.\n  This can be removed once a fix is released for core.async."}, uniq-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 420, :column 8, :end-line 420, :end-column 15, :private true, :arglists (quote ([in out]))}, :private true, :name reagi.core/uniq-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 15, :method-params ([in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 2, :fn-var true, :arglists (quote ([in out]))}, completed {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([x])), :doc "Wraps x to guarantee that it will be the last value in a behavior or event\n  stream. The value of x will be cached, and any values after x will be\n  ignored."}, :name reagi.core/completed, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Wraps x to guarantee that it will be the last value in a behavior or event\n  stream. The value of x will be cached, and any values after x will be\n  ignored."}, events {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 234, :column 7, :end-line 234, :end-column 13, :arglists (quote ([] [init])), :doc "Create a referential stream of events. An initial value may optionally be\n  supplied, otherwise the stream will be unrealized until the first value is\n  pushed to it. Event streams will deref to the latest value pushed to the\n  stream.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [init]), :arglists ([] [init]), :arglists-meta (nil nil)}}, :name reagi.core/events, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [init]), :arglists ([] [init]), :arglists-meta (nil nil)}, :method-params ([] [init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists ([] [init]), :doc "Create a referential stream of events. An initial value may optionally be\n  supplied, otherwise the stream will be unrealized until the first value is\n  pushed to it. Event streams will deref to the latest value pushed to the\n  stream."}, ->Behavior {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 59, :column 10, :end-line 59, :end-column 18, :protocols #{reagi.core/Signal cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IDeref}, :factory :positional, :arglists (quote ([func cache]))}, :protocols #{reagi.core/Signal cljs.core/IDeref}, :name reagi.core/->Behavior, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 18, :method-params ([func cache]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func cache])), :skip-protocol-flag #{cljs.core/IDeref}}, box {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 42, :column 7, :end-line 42, :end-column 10, :arglists (quote ([x])), :doc "Box a value to ensure it can be sent through a channel."}, :name reagi.core/box, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Box a value to ensure it can be sent through a channel."}, time {:name reagi.core/time, :file "resources/public/js/compiled/out/reagi/core.cljs", :line 85, :column 1, :end-line 85, :end-column 10, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 85, :column 6, :end-line 85, :end-column 10}, :doc "A behavior that tracks the current time in seconds."}, join-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 497, :column 8, :end-line 497, :end-column 15, :private true, :arglists (quote ([chs out]))}, :private true, :name reagi.core/join-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 15, :method-params ([chs out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 497, :end-line 497, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs out]))}, t_reagi$core29093 {:num-fields 3, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :name reagi.core/t_reagi$core29093, :file "resources/public/js/compiled/out/reagi/core.cljs", :type true, :anonymous true, :column 5, :line 47, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, no-value {:name reagi.core/no-value, :file "resources/public/js/compiled/out/reagi/core.cljs", :line 227, :column 1, :end-line 227, :end-column 24, :private true, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 227, :column 16, :end-line 227, :end-column 24, :private true}}, accum {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 399, :column 7, :end-line 399, :end-column 12, :arglists (quote ([init stream])), :doc "Change an initial value based on an event stream of functions."}, :name reagi.core/accum, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 12, :method-params ([init stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init stream])), :doc "Change an initial value based on an event stream of functions."}, Behavior {:num-fields 2, :protocols #{reagi.core/Signal cljs.core/IDeref}, :name reagi.core/Behavior, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 18, :type true, :column 10, :line 59, :record false, :end-line 59, :skip-protocol-flag #{cljs.core/IDeref}}, port {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 97, :column 4, :end-line 97, :end-column 8, :protocol reagi.core/Observable, :doc "Return a write-only core.async channel. Any elements send to the port will\n    be distributed to the listener channels in parallel. Each listener must\n    accept before the next item is distributed.", :arglists (quote ([ob]))}, :protocol reagi.core/Observable, :name reagi.core/port, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 8, :method-params ([ob]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ob])), :doc "Return a write-only core.async channel. Any elements send to the port will\n    be distributed to the listener channels in parallel. Each listener must\n    accept before the next item is distributed."}, no-value? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 231, :column 8, :end-line 231, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name reagi.core/no-value?, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, no-op {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 225, :column 8, :end-line 225, :end-column 13, :private true, :arglists (quote ([]))}, :private true, :name reagi.core/no-op, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, behavior-call {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 68, :column 7, :end-line 68, :end-column 20, :arglists (quote ([func])), :doc "Takes a zero-argument function and yields a Behavior object that will\n  evaluate the function each time it is dereferenced. See: behavior."}, :name reagi.core/behavior-call, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 20, :method-params ([func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([func])), :doc "Takes a zero-argument function and yields a Behavior object that will\n  evaluate the function each time it is dereferenced. See: behavior."}, merge {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 298, :column 7, :end-line 298, :end-column 12, :arglists (quote ([& streams])), :doc "Combine multiple streams into one. All events from the input streams are\n  pushed to the returned stream.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}}, :name reagi.core/merge, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}, :method-params [(streams)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 0, :fn-var true, :arglists ([& streams]), :doc "Combine multiple streams into one. All events from the input streams are\n  pushed to the returned stream."}, ->t_reagi$core29097 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([mult* ch state meta29098])), :file nil}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name reagi.core/->t_reagi$core29097, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :method-params ([mult* ch state meta29098]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 113, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult* ch state meta29098])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, flatten-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 515, :column 8, :end-line 515, :end-column 18, :private true, :arglists (quote ([in valve out]))}, :private true, :name reagi.core/flatten-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 18, :method-params ([in valve out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 3, :fn-var true, :arglists (quote ([in valve out]))}, uniq {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 429, :column 7, :end-line 429, :end-column 11, :arglists (quote ([stream])), :doc "Remove any successive duplicates from the stream."}, :name reagi.core/uniq, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 11, :method-params ([stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stream])), :doc "Remove any successive duplicates from the stream."}, zip-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 308, :column 8, :end-line 308, :end-column 14, :private true, :arglists (quote ([ins out]))}, :private true, :name reagi.core/zip-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :method-params ([ins out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ins out]))}, reduce-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 372, :column 8, :end-line 372, :end-column 17, :private true, :arglists (quote ([f init in out]))}, :private true, :name reagi.core/reduce-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 17, :method-params ([f init in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 4, :fn-var true, :arglists (quote ([f init in out]))}, flatten {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 530, :column 7, :end-line 530, :end-column 14, :arglists (quote ([stream])), :doc "Flatten a stream of streams into a stream that contains all the values of\n  its components."}, :name reagi.core/flatten, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :method-params ([stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stream])), :doc "Flatten a stream of streams into a stream that contains all the values of\n  its components."}, sample {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 479, :column 7, :end-line 479, :end-column 13, :arglists (quote ([interval-ms reference])), :doc "Turn a reference into an event stream by deref-ing it at fixed intervals.\n  The interval time is specified in milliseconds."}, :name reagi.core/sample, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([interval-ms reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([interval-ms reference])), :doc "Turn a reference into an event stream by deref-ing it at fixed intervals.\n  The interval time is specified in milliseconds."}, listen-all {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 292, :column 8, :end-line 292, :end-column 18, :private true, :arglists (quote ([streams]))}, :private true, :name reagi.core/listen-all, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 18, :method-params ([streams]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 1, :fn-var true, :arglists (quote ([streams]))}, connect-port {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 295, :column 8, :end-line 295, :end-column 20, :private true, :arglists (quote ([stream f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(stream f args)], :arglists ([stream f & args]), :arglists-meta (nil)}}, :private true, :name reagi.core/connect-port, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(stream f args)], :arglists ([stream f & args]), :arglists-meta (nil)}, :method-params [(stream f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists ([stream f & args])}, depend-on {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 163, :column 8, :end-line 163, :end-column 17, :private true, :arglists (quote ([parent children])), :doc "Protect a collection of child objects from being GCed before the parent."}, :private true, :name reagi.core/depend-on, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 17, :method-params ([parent children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent children])), :doc "Protect a collection of child objects from being GCed before the parent."}, filter {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 357, :column 7, :end-line 357, :end-column 13, :arglists (quote ([pred stream])), :doc "Filter a stream by a predicate."}, :name reagi.core/filter, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 13, :method-params ([pred stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred stream])), :doc "Filter a stream by a predicate."}, listen {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 101, :column 4, :end-line 101, :end-column 10, :protocol reagi.core/Observable, :doc "Add a listener channel to the observable. The channel will be closed\n    when the port of the observable is closed. Returns the channel.\n\n    Any events sent to the channel will be boxed to protect the channel from\n    nils. To listen for unboxed events, use subscribe.", :arglists (quote ([ob ch]))}, :protocol reagi.core/Observable, :name reagi.core/listen, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 10, :method-params ([ob ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ob ch])), :doc "Add a listener channel to the observable. The channel will be closed\n    when the port of the observable is closed. Returns the channel.\n\n    Any events sent to the channel will be boxed to protect the channel from\n    nils. To listen for unboxed events, use subscribe."}, empty-queue {:name reagi.core/empty-queue, :file "resources/public/js/compiled/out/reagi/core.cljs", :line 404, :column 1, :end-line 404, :end-column 27, :private true, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 404, :column 16, :end-line 404, :end-column 27, :private true}}, ->t_reagi$core29090 {:protocol-inline nil, :meta {:anonymous true, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box x meta29091])), :file nil}, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :name reagi.core/->t_reagi$core29090, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :method-params ([box x meta29091]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box x meta29091])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, behavior? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 80, :column 7, :end-line 80, :end-column 16, :arglists (quote ([x])), :doc "Return true if the object is a behavior."}, :name reagi.core/behavior?, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if the object is a behavior."}, Signal {:no-doc true, :meta {:no-doc true, :protocol-symbol true, :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :end-column 29, :column 23, :line 17, :protocol-info {:methods {complete? [[signal]]}}, :end-line 17, :doc nil, :jsdoc ("@interface")}, :protocol-symbol true, :name reagi.core/Signal, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 29, :column 1, :line 17, :protocol-info {:methods {complete? [[signal]]}}, :info nil, :end-line 17, :impls #{reagi.core/Events reagi.core/Behavior}, :doc nil, :jsdoc ("@interface")}, zip {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 322, :column 7, :end-line 322, :end-column 10, :arglists (quote ([& streams])), :doc "Combine multiple streams into one. On an event from any input stream, a\n  vector will be pushed to the returned stream containing the latest events\n  of all input streams.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}}, :name reagi.core/zip, :variadic true, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(streams)], :arglists ([& streams]), :arglists-meta (nil)}, :method-params [(streams)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 0, :fn-var true, :arglists ([& streams]), :doc "Combine multiple streams into one. On an event from any input stream, a\n  vector will be pushed to the returned stream containing the latest events\n  of all input streams."}, t_reagi$core29090 {:num-fields 3, :protocols #{reagi.core/Boxed cljs.core/IMeta cljs.core/IWithMeta}, :name reagi.core/t_reagi$core29090, :file "resources/public/js/compiled/out/reagi/core.cljs", :type true, :anonymous true, :column 5, :line 47, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, Observable {:no-doc true, :meta {:no-doc true, :protocol-symbol true, :file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :end-column 33, :column 23, :line 96, :protocol-info {:methods {port [[ob]], listen [[ob ch]]}}, :end-line 96, :doc nil, :jsdoc ("@interface")}, :protocol-symbol true, :name reagi.core/Observable, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 33, :column 1, :line 96, :protocol-info {:methods {port [[ob]], listen [[ob ch]]}}, :info nil, :end-line 96, :impls #{reagi.core/Events}, :doc nil, :jsdoc ("@interface")}, count {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 394, :column 7, :end-line 394, :end-column 12, :arglists (quote ([stream])), :doc "Return an accumulating count of the items in a stream."}, :name reagi.core/count, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 12, :method-params ([stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stream])), :doc "Return an accumulating count of the items in a stream."}, delta {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 90, :column 7, :end-line 90, :end-column 12, :arglists (quote ([])), :doc "Return a behavior that tracks the time in seconds from when it was created."}, :name reagi.core/delta, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a behavior that tracks the time in seconds from when it was created."}, throttle-ch {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 449, :column 8, :end-line 449, :end-column 19, :private true, :arglists (quote ([timeout-ms in out]))}, :private true, :name reagi.core/throttle-ch, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 19, :method-params ([timeout-ms in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 449, :end-line 449, :max-fixed-arity 3, :fn-var true, :arglists (quote ([timeout-ms in out]))}, once {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 262, :column 7, :end-line 262, :end-column 11, :arglists (quote ([value])), :doc "Create a completed event stream for a single value."}, :name reagi.core/once, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 11, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Create a completed event stream for a single value."}, t_reagi$core29332 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name reagi.core/t_reagi$core29332, :file "resources/public/js/compiled/out/reagi/core.cljs", :type true, :anonymous true, :column 11, :line 113, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, events? {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 257, :column 7, :end-line 257, :end-column 14, :arglists (quote ([x])), :doc "Return true if the object is a stream of events."}, :name reagi.core/events?, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if the object is a stream of events."}, constantly {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 367, :column 7, :end-line 367, :end-column 17, :arglists (quote ([value stream])), :doc "Constantly map the same value over an event stream."}, :name reagi.core/constantly, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 17, :method-params ([value stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value stream])), :doc "Constantly map the same value over an event stream."}, wait {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 488, :column 7, :end-line 488, :end-column 11, :arglists (quote ([time-ms])), :doc "Returns a channel that will complete unrealized after specified number of\n  milliseconds."}, :name reagi.core/wait, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 11, :method-params ([time-ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time-ms])), :doc "Returns a channel that will complete unrealized after specified number of\n  milliseconds."}, dispose {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 183, :column 4, :end-line 183, :end-column 11, :protocol reagi.core/Disposable, :doc "Clean up any resources an object has before it goes out of scope. In\n    Clojure this is called automatically when the object is finalized. In\n    ClojureScript this must be called manually.", :arglists (quote ([x]))}, :protocol reagi.core/Disposable, :name reagi.core/dispose, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Clean up any resources an object has before it goes out of scope. In\n    Clojure this is called automatically when the object is finalized. In\n    ClojureScript this must be called manually."}, throttle {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 458, :column 7, :end-line 458, :end-column 15, :arglists (quote ([timeout-ms stream])), :doc "Remove any events in a stream that occur too soon after the prior event.\n  The timeout is specified in milliseconds."}, :name reagi.core/throttle, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 15, :method-params ([timeout-ms stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 2, :fn-var true, :arglists (quote ([timeout-ms stream])), :doc "Remove any events in a stream that occur too soon after the prior event.\n  The timeout is specified in milliseconds."}, on-dispose {:protocol-inline nil, :meta {:file "/Users/js/dev/cljsout/resources/public/js/compiled/out/reagi/core.cljs", :line 187, :column 4, :end-line 187, :end-column 14, :protocol reagi.core/Disposable, :doc "Add a function to be called when the object is disposed.", :arglists (quote ([x f]))}, :protocol reagi.core/Disposable, :name reagi.core/on-dispose, :variadic false, :file "resources/public/js/compiled/out/reagi/core.cljs", :end-column 14, :method-params ([x f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x f])), :doc "Add a function to be called when the object is disposed."}, t_reagi$core29097 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name reagi.core/t_reagi$core29097, :file "resources/public/js/compiled/out/reagi/core.cljs", :type true, :anonymous true, :column 11, :line 113, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {reagi.core reagi.core, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{x meta29091 :private :else pos? closed disposers :recur mult* meta29333 func n box state ch integer? meta29098 head cache quote :arglists :doc mult meta29094}, :order [x box :arglists :doc quote meta29091 meta29094 func cache mult* :private ch state meta29098 :recur :else meta29333 mult head closed disposers integer? n pos?]}, :doc "Functions and types for functional reactive programming."}